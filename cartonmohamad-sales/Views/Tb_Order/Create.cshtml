```cshtml
@model cartonmohamad_sales.Models.Tb_Order
@using System.Linq
@{
    ViewBag.Title = "ثبت سفارش / فاکتور";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var cust = ViewBag.Customer as cartonmohamad_sales.Models.Customer;
}

<div class="container py-4" dir="rtl">
    <div class="d-flex align-items-center mb-3">
        <h2 class="m-0">ثبت سفارش / فاکتور</h2>
        <div class="ms-auto">
            @Html.ActionLink("بازگشت به فهرست", "Index", null, new { @class = "btn btn-outline-secondary" })
        </div>
    </div>

    @if (cust != null)
    {
        <div class="alert alert-info d-flex align-items-center gap-3">
            <i class="fa fa-user-circle fa-lg"></i>
            <div>
                <div>
                    <strong>مشتری:</strong>
                    <span class="ms-1">@cust.Customer1</span>
                    @if (!string.IsNullOrWhiteSpace(cust.company_name))
                    {<span class="text-muted">— @cust.company_name</span>}
                </div>
                @if (!string.IsNullOrWhiteSpace(cust.payment_behavior))
                {<div class="small text-muted mt-1">وضعیت پرداختی: @cust.payment_behavior</div>}
            </div>
        </div>
    }

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="row g-4">
            <!-- سفارش -->
            <div class="col-12 col-xxl-6">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-light"><strong>اطلاعات سفارش</strong></div>
                    <div class="card-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })

                        <div class="row g-3">
                            <div class="col-md-12">
                                <label class="form-label">مشتری</label>
                                @Html.DropDownListFor(m => m.J_ID_Customer,
                                                        (SelectList)ViewBag.J_ID_Customer, "-- انتخاب مشتری --",
                                                        new { @class = "form-select" })
                                @Html.ValidationMessageFor(m => m.J_ID_Customer, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">شماره سفارش</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa fa-hashtag"></i></span>
                                    @Html.EditorFor(m => m.Number_order, new { htmlAttributes = new { @class = "form-control", placeholder = "مثلاً 100245" } })
                                </div>
                                @Html.ValidationMessageFor(m => m.Number_order, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">کد/شناسه فاکتور</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa fa-file-invoice"></i></span>
                                    @Html.EditorFor(m => m.J_ID_Facktor, new { htmlAttributes = new { @class = "form-control", placeholder = "در صورت وجود" } })
                                </div>
                                @Html.ValidationMessageFor(m => m.J_ID_Facktor, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">شماره سفارش در راهکاران</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa fa-barcode"></i></span>
                                    @Html.EditorFor(m => m.Number_ORder_rahkaran, new { htmlAttributes = new { @class = "form-control", placeholder = "در صورت وجود" } })
                                </div>
                                @Html.ValidationMessageFor(m => m.Number_ORder_rahkaran, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">وضعیت</label>
                                @Html.DropDownListFor(m => m.Status,
                                                        new SelectList(new[] {
                                        new { Value = "new",           Text = "جدید" },
                                        new { Value = "approved",      Text = "تایید شده" },
                                        new { Value = "in_production", Text = "در حال تولید" },
                                        new { Value = "shipped",       Text = "ارسال شده" }
}, "Value", "Text", Model?.Status),
                                                        "-- انتخاب وضعیت --", new { @class = "form-select" })
                                @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">تاریخ سفارش</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fa fa-calendar-alt"></i></span>
                                    @Html.TextBoxFor(m => m.Date, new { @class = "form-control persian-date", placeholder = "تاریخ را انتخاب کنید" })
                                </div>
                                @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        @Html.ActionLink("انصراف", "Index", null, new { @class = "btn btn-outline-secondary" })
                        <button type="submit" class="btn btn-primary"><i class="fa fa-save ms-1"></i> ذخیره سفارش</button>
                    </div>
                </div>
            </div>

            <!-- محصول -->
            <div class="col-12 col-xxl-6">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-light"><strong>مشخصات کارتن / محصول</strong></div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">کد محصول</label>
                                <input type="text" class="form-control" name="Product.Code" placeholder="مثلاً C-2025" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">نوع کارتن</label>
                                <select class="form-select" name="Product.Type" id="productType">
                                    <option value="">-- انتخاب کنید --</option>
                                    <option value="regular">معمولی</option>
                                    <option value="die_cut">دایکاتی</option>
                                    <option value="laminated">لمینتی</option>
                                    <option value="sheet">ورق</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">نام کارتن</label>
                                <input type="text" class="form-control" name="Product.Name" placeholder="نام طرح/کارتن" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">تیراژ</label>
                                <input type="number" min="0" class="form-control" name="Product.Tirage" id="tirage" placeholder="مثلاً 5000" />
                            </div>

                            <div class="col-12">
                                <label class="form-label">توضیحات</label>
                                <textarea class="form-control" rows="2" name="Product.Description" placeholder="توضیحات تکمیلی ..."></textarea>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label d-block mb-1">چند لایه</label>
                                <div class="btn-group" role="group">
                                    <input type="radio" class="btn-check" name="Product.Layers" id="layer3" value="3" autocomplete="off">
                                    <label class="btn btn-outline-primary" for="layer3">۳ لایه</label>
                                    <input type="radio" class="btn-check" name="Product.Layers" id="layer5" value="5" autocomplete="off">
                                    <label class="btn btn-outline-primary" for="layer5">۵ لایه</label>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label d-block mb-1">چند تیکه</label>
                                <div class="btn-group" role="group">
                                    <input type="radio" class="btn-check" name="Product.Pieces" id="piece1" value="1" autocomplete="off">
                                    <label class="btn btn-outline-primary" for="piece1">یک تیکه</label>
                                    <input type="radio" class="btn-check" name="Product.Pieces" id="pieceHalf" value="half" autocomplete="off">
                                    <label class="btn btn-outline-primary" for="pieceHalf">نیم کارتن</label>
                                    <input type="radio" class="btn-check" name="Product.Pieces" id="piece4" value="4" autocomplete="off">
                                    <label class="btn btn-outline-primary" for="piece4">چهار تیکه</label>
                                </div>
                            </div>

                            <!-- نوع درب -->
                            <div class="col-md-12">
                                <label class="form-label">نوع درب</label>
                                <select id="doorOption" class="form-select">
                                    <option value="double_meet">دو درب - بسته (بدون همپوشانی)</option>
                                    <option value="double_overlap">دو درب - بسته (همپوشانی)</option>
                                    <option value="double_fol">دو درب - بسته (Full Overlap)</option>
                                    <option value="single_closed">تک درب - بسته</option>
                                    <option value="single_open">تک درب - باز/نامتوازن (ورود دستی)</option>
                                    <option value="double_open">دو درب - باز/نامتوازن (ورود دستی)</option>
                                </select>
                            </div>

                            <!-- ورودی‌های باز/نامتوازن -->
                            <div class="col-md-6 d-none" id="boxSingleOpen">
                                <label class="form-label">مقدار لب درب (cm) - تک درب باز</label>
                                <input type="number" step="0.1" min="0" class="form-control" id="singleFlapVal" placeholder="مثلاً 20" />
                            </div>
                            <div class="col-md-6 d-none" id="boxDoubleOpenTop">
                                <label class="form-label">لب درب بالا (cm) - دو درب باز</label>
                                <input type="number" step="0.1" min="0" class="form-control" id="doubleFlapTop" placeholder="مثلاً 18" />
                            </div>
                            <div class="col-md-6 d-none" id="boxDoubleOpenBot">
                                <label class="form-label">لب درب پایین (cm) - دو درب باز</label>
                                <input type="number" step="0.1" min="0" class="form-control" id="doubleFlapBottom" placeholder="مثلاً 12" />
                            </div>

                            <!-- ابعاد داخلی -->
                            <div class="col-12">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label class="form-label">طول (cm)</label>
                                        <input type="number" step="0.1" min="0" class="form-control" name="Product.LengthCm" id="lengthCm" placeholder="مثلاً 30.5" required />
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">عرض (cm)</label>
                                        <input type="number" step="0.1" min="0" class="form-control" name="Product.WidthCm" id="widthCm" placeholder="مثلاً 20" required />
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">ارتفاع (cm)</label>
                                        <input type="number" step="0.1" min="0" class="form-control" name="Product.HeightCm" id="heightCm" placeholder="مثلاً 15" required />
                                    </div>
                                </div>
                            </div>

                            <!-- همه چیز بعد از «ارتفاع»: در این wrapper تا انتهای کارت -->
                            <div id="productExtrasAfterHeight">
                                <!-- دایکاتی (اختیاری) -->
                                <div class="col-12 d-none" id="dieCutDims">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label">تیغ به تیغ (طول قالب) - cm</label>
                                            <input type="number" step="0.1" min="0" class="form-control" name="Product.DieToDieLengthCm" id="dieToDieLengthCm" placeholder="مثلاً 85.0" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">عرض قالب - cm</label>
                                            <input type="number" step="0.1" min="0" class="form-control" name="Product.MoldWidthCm" id="moldWidthCm" placeholder="مثلاً 115.0" />
                                        </div>
                                    </div>
                                </div>
                                <!-- اگر آیتم‌های دیگری بعد از ارتفاع دارید، همین‌جا اضافه شوند -->
                            </div>

                        </div>
                    </div>
                    <div class="card-footer small text-muted">
                        نکته: فیلدهای «Product.*» برای Bind بعدی با API/ViewModel ارسال می‌شوند.
                    </div>
                </div>
            </div>

            <!-- مساحت و شیت + عرض‌های ورق -->
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <strong>مساحت و شیت</strong><small class="text-muted">محاسبه‌ی لحظه‌ای</small>
                    </div>

                    <!-- حالت کامل (قدیمی) -->
                    <div id="calcFullMode">
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-3">
                                    <label class="form-label">عرض لب چسب (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="seamAllow" value="2.0">
                                    <div class="form-text">seam / glue flap</div>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">تلرانس برش (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="trimAllow" value="0.5">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">گپ مرکز (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="gapCenter" value="0">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">همپوشانی (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="overlap" value="0">
                                </div>

                                <div class="col-md-3">
                                    <label class="form-label">طول شیت صنعتی (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="sheetLen" value="200">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">عرض شیت صنعتی (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="sheetWid" value="200">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">فاصله بین بلنک‌ها (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="kerf" value="0.5">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">حاشیه اطراف شیت (cm)</label>
                                    <input type="number" step="0.1" min="0" class="form-control" id="sheetMargin" value="1">
                                </div>

                                <!-- جدول عرض‌های ورق -->
                                <div class="col-12 mt-4">
                                    <div class="card shadow-sm">
                                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                            <strong>مقایسه‌ی عرض‌های ورق (برحسب عرض بلنک فعلی)</strong>
                                            <small class="text-muted">لب دستگاه: +۲cm به هر بلنک</small>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-sm table-hover align-middle">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th class="text-center">انتخاب</th>
                                                            <th class="text-center">عرض ورق (cm)</th>
                                                            <th class="text-center">عرض مؤثر هر جعبه (Y + 2)</th>
                                                            <th class="text-center">تعداد جعبه</th>
                                                            <th class="text-center">ضایعات (cm)</th>
                                                            <th class="text-center">ضایعات (%)</th>
                                                            <th class="text-center">عرض صنعتی</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="tblSheetWidths"></tbody>
                                                </table>
                                            </div>
                                            <input type="hidden" name="SelectedSheetWidth" id="SelectedSheetWidth" />
                                        </div>
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="p-3 bg-light rounded border">
                                        <div class="row gy-2">
                                            <div class="col-md-2"><strong>طول بلنک (X):</strong> <span id="blankX">—</span> cm</div>
                                            <div class="col-md-2"><strong>عرض بلنک (Y):</strong> <span id="blankY">—</span> cm</div>
                                            <div class="col-md-3"><strong>مساحت هر عدد:</strong> <span id="areaM2">—</span> m²</div>
                                            <div class="col-md-2"><strong>روی هر شیت:</strong> <span id="perSheet">—</span> عدد</div>
                                            <div class="col-md-3"><strong>شیت موردنیاز:</strong> <span id="sheetsNeeded">—</span> شیت</div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    <!-- حالت استعلام (فقط دکمه) -->
                    <div id="inquiryOnlyMode" class="d-none">
                        <div class="card-body">
                            <button type="button" class="btn btn-warning w-100" id="btnInquiry">
                                <i class="fa fa-paper-plane ms-1"></i> ارسال برای استعلام
                            </button>
                            <small class="text-muted d-block mt-2 text-center">
                                برای این نوع کارتن، محاسبات نمایش داده نمی‌شود؛ درخواست استعلام ارسال کنید.
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- گام فلوت + ترکیب کاغذ -->
            <div id="fluteSection" class="card shadow-sm d-none mt-4" dir="rtl">
                <div class="card-header bg-light d-flex align-items-center gap-2">
                    <strong>گام فلوت</strong>
                    <div class="ms-auto" style="min-width:240px">
                        <select id="fluteSelect" class="form-select">
                            <option value="">-- انتخاب گام فلوت --</option>
                            <option value="C">C</option>
                            <option value="B">B</option>
                            <option value="E">E</option>
                            <option value="CB">CB</option>
                            <option value="CE">CE</option>
                            <option value="BE">BE</option>
                        </select>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered align-middle mb-0">
                            <thead id="paperComboHead"></thead>
                            <tbody id="paperComboBody"></tbody>
                        </table>
                    </div>
                    <small class="text-muted d-block mt-2">
                        ابتدا از جدول «عرض‌های ورق» یک ردیف را انتخاب کنید؛ سپس گام فلوت را برگزینید.
                    </small>
                </div>
            </div>
            <input type="hidden" id="SelectedFluteType" name="SelectedFluteType" />
        </div>

        <div class="text-end mt-3 d-xl-none">
            <button type="submit" class="btn btn-primary"><i class="fa fa-save ms-1"></i> ذخیره سفارش</button>
        </div>
    }
</div>

@section Styles{
    <style>
        [dir="rtl"] .form-label {
            font-weight: 600;
        }

        .card {
            border-radius: 12px;
        }

        .input-group-text {
            min-width: 42px;
            justify-content: center;
        }

        tr.selected-row {
            background-color: #f0f7ff;
        }

        #paperComboHead th, #paperComboBody th {
            white-space: nowrap;
        }

        .text-danger.fw-semibold, .text-success.fw-semibold {
            font-weight: 600 !important;
        }
    </style>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")

    <!-- سوییچ حالت «معمولی/استعلام» بر اساس نوع کارتن -->
    <script>
        (function () {
            const selType = document.getElementById('productType');
            const extras = document.getElementById('productExtrasAfterHeight');
            const dieBox = document.getElementById('dieCutDims');
            const flute = document.getElementById('fluteSection');

            const calcFull = document.getElementById('calcFullMode');
            const inquiry = document.getElementById('inquiryOnlyMode');

            function isRegular() { return (selType?.value || '').toLowerCase() === 'regular'; }

            function applyProductTypeMode() {
                const regular = isRegular();

                // کارت «محصول»: هرچه بعد از ارتفاع است
                extras?.classList.toggle('d-none', !regular);
                if (!regular) { dieBox?.classList.add('d-none'); flute?.classList.add('d-none'); }

                // کارت «مساحت و شیت»
                calcFull?.classList.toggle('d-none', !regular);
                inquiry?.classList.toggle('d-none', regular);

                // اطلاع‌رسانی به بقیه اسکریپت‌ها
                document.dispatchEvent(new CustomEvent('productType:modeChanged', { detail: { regular } }));

                // تریگر محاسبه برای پاکسازی/بازنمایش
                document.dispatchEvent(new CustomEvent('calc:updated', { detail: { Y: regular ? 0 : NaN } }));
            }

            selType?.addEventListener('change', applyProductTypeMode);
            document.addEventListener('DOMContentLoaded', applyProductTypeMode);
            applyProductTypeMode();

            // دکمه استعلام (Placeholder)
            document.getElementById('btnInquiry')?.addEventListener('click', function () {
                alert('درخواست استعلام ثبت شد.');
            });
        })();
    </script>

    <!-- محاسبات بلنک + رویداد calc:updated -->
    <script>
        (function () {
            const $ = s => document.querySelector(s);
            const nv = el => { const v = parseFloat((el?.value || "").toString().replace(',', '.')); return isNaN(v) ? 0 : v; };

            const selType = $('#productType'), tir = $('#tirage');
            const L = $('#lengthCm'), W = $('#widthCm'), H = $('#heightCm');
            const dieBox = $('#dieCutDims'), dieL = $('#dieToDieLengthCm'), dieW = $('#moldWidthCm');

            const door = $('#doorOption'), sOpen = $('#singleFlapVal'), dTop = $('#doubleFlapTop'), dBot = $('#doubleFlapBottom');
            const boxSO = $('#boxSingleOpen'), boxDT = $('#boxDoubleOpenTop'), boxDB = $('#boxDoubleOpenBot');

            const seam = $('#seamAllow'), trim = $('#trimAllow'), gap = $('#gapCenter'), ovl = $('#overlap');
            const sheetL = $('#sheetLen'), sheetW = $('#sheetWid'), kerf = $('#kerf'), margin = $('#sheetMargin');
            const outX = $('#blankX'), outY = $('#blankY'), outA = $('#areaM2'), outP = $('#perSheet'), outS = $('#sheetsNeeded');

            const fStd = 1.0;

            function toggleOpen() {
                const m = door?.value || '';
                boxSO?.classList.toggle('d-none', m !== 'single_open');
                const d = m === 'double_open';
                boxDT?.classList.toggle('d-none', !d);
                boxDB?.classList.toggle('d-none', !d);
            }
            function toggleDie() { dieBox?.classList.toggle('d-none', (selType?.value || '').toLowerCase() !== 'die_cut'); }

            function flaps(L, W, mode) {
                let Ft = 0, Fb = 0, fmT = 2, fmB = 2, g = nv(gap), o = nv(ovl);
                switch (mode) {
                    case 'single_closed': Ft = W + fStd; Fb = 0; break;
                    case 'double_meet': Ft = (W - g) / 2; Fb = (W - g) / 2; break;
                    case 'double_overlap': Ft = (W + o) / 2; Fb = (W + o) / 2; break;
                    case 'double_fol': Ft = W; Fb = W; break;
                    case 'single_open': Ft = nv(sOpen); Fb = 0; break;
                    case 'double_open': Ft = nv(dTop); Fb = nv(dBot); break;
                    default: Ft = (W - g) / 2; Fb = (W - g) / 2; break;
                }
                return { Ft, Fb, fmT, fmB };
            }
            function pack(FW, FH, BW, BH, k) {
                if (BW <= 0 || BH <= 0 || FW <= 0 || FH <= 0) return 0;
                const nx = Math.max(0, Math.floor((FW + k) / (BW + k)));
                const ny = Math.max(0, Math.floor((FH + k) / (BH + k)));
                return nx * ny;
            }

            function compute() {
                // اگر نوع غیر از «معمولی» باشد، محاسبات نمایش داده نشوند
                const notRegular = ((selType?.value || '').toLowerCase() !== 'regular');
                if (notRegular) {
                    if (outX) outX.textContent = '—';
                    if (outY) outY.textContent = '—';
                    if (outA) outA.textContent = '—';
                    if (outP) outP.textContent = '—';
                    if (outS) outS.textContent = '—';
                    document.dispatchEvent(new CustomEvent('calc:updated', { detail: { Y: NaN } }));
                    return;
                }

                const l = nv(L), w = nv(W), h = nv(H);
                const die = (selType?.value || '').toLowerCase() === 'die_cut';
                const mode = door?.value || 'double_meet';
                const fl = flaps(l, w, mode);
                const sa = nv(seam), ta = nv(trim);

                let Xcm, Ycm;
                if (die) {
                    const dl = nv(dieL), dw = nv(dieW);
                    if (dl > 0 && dw > 0) { Xcm = dl; Ycm = dw; }
                    else { Xcm = 2 * (l + w) + sa + ta; Ycm = h + Math.max(fl.Ft, fl.fmT) + Math.max(fl.Fb, fl.fmB) + ta; }
                } else {
                    Xcm = 2 * (l + w) + sa + ta;
                    Ycm = h + Math.max(fl.Ft, fl.fmT) + Math.max(fl.Fb, fl.fmB) + ta;
                }

                const area = (Xcm * Ycm) / 10000;
                const Fx = Math.max(0, nv(sheetL) - 2 * nv(margin));
                const Fy = Math.max(0, nv(sheetW) - 2 * nv(margin));
                const per = Math.max(pack(Fx, Fy, Xcm, Ycm, nv(kerf)), pack(Fx, Fy, Ycm, Xcm, nv(kerf)));
                const qty = Math.max(0, Math.floor(nv(tir)));
                const sheets = per > 0 ? Math.ceil(qty / per) : 0;

                outX.textContent = Xcm.toFixed(1); outY.textContent = Ycm.toFixed(1);
                outA.textContent = area.toFixed(4); outP.textContent = per.toLocaleString('fa-IR');
                outS.textContent = sheets.toLocaleString('fa-IR');

                document.dispatchEvent(new CustomEvent('calc:updated', { detail: { Y: Ycm } }));
            }

            [selType, tir, L, W, H, dieL, dieW, door, sOpen, dTop, dBot, seam, trim, gap, ovl, sheetL, sheetW, kerf, margin]
                .forEach(el => el && el.addEventListener('input', () => { toggleOpen(); toggleDie(); compute(); }));

            toggleOpen(); toggleDie(); compute();

            // اگر حالت کارتن تغییر کند، دوباره محاسبه کن
            document.addEventListener('productType:modeChanged', () => compute());
        })();
    </script>

    <!-- جدول عرض‌های ورق -->
    <script>
        (function () {
            const WIDTHS = [80, 90, 100, 110, 120, 125, 140], EDGE = 2.0;
            const body = document.getElementById('tblSheetWidths'),
                hid = document.getElementById('SelectedSheetWidth'),
                fluteSection = document.getElementById('fluteSection');

            const current = () => hid?.value ? parseFloat(hid.value) : null;
            const setSel = v => { if (hid) hid.value = v ?? ''; };
            const radio = w => `<div class="form-check d-flex justify-content-center m-0">
                      <input class="form-check-input" type="radio" name="sheetWidthChoice" value="${w}">
                    </div>`;

            const selType = document.getElementById('productType');
            const isRegular = () => (selType?.value || '').toLowerCase() === 'regular';

            function toggleFluteSection() {
                const hasWidth = !!(hid && hid.value);
                fluteSection?.classList.toggle('d-none', !hasWidth || !isRegular());
            }
            function hi() {
                (body?.querySelectorAll('tr') || []).forEach(r => r.classList.remove('selected-row'));
                const sel = current();
                if (sel != null) { body.querySelector(`input[type="radio"][value="${sel}"]`)?.closest('tr')?.classList.add('selected-row'); }
            }
            function render(y) {
                if (!body) return; body.innerHTML = '';
                const eff = Math.max(0, (y || 0) + EDGE), prev = current();
                WIDTHS.forEach(w => {
                    const boxes = eff > 0 ? Math.floor(w / eff) : 0;
                    const used = boxes * eff, waste = Math.max(0, w - used), pct = w > 0 ? (waste / w) * 100 : 0;
                    const cls = pct > 11 ? 'text-danger fw-semibold' : 'text-success fw-semibold';
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td class="text-center">${radio(w)}</td>
                        <td class="text-center">${w.toFixed(0)}</td>
                        <td class="text-center">${eff.toFixed(1)}</td>
                        <td class="text-center ${boxes === 0 ? 'text-danger fw-bold' : ''}">${boxes}</td>
                        <td class="text-center">${waste.toFixed(1)}</td>
                        <td class="text-center ${cls}">${pct.toFixed(1)}%</td>
                        <td class="text-center">${w.toFixed(0)} cm</td>`;
                    tr.querySelector('input[type="radio"]').addEventListener('change', function () {
                        if (this.checked) { setSel(this.value); hi(); toggleFluteSection(); window.reRenderFluteIfNeeded?.(); }
                    });
                    body.appendChild(tr);
                });
                if (prev != null) {
                    const keep = body.querySelector(`input[type="radio"][value="${prev}"]`);
                    if (keep) { keep.checked = true; setSel(prev); } else setSel('');
                }
                hi(); toggleFluteSection();
            }

            document.addEventListener('calc:updated', e => {
                const y = e?.detail?.Y;
                if (typeof y !== 'number' || isNaN(y)) {
                    if (body) body.innerHTML = '';
                    setSel('');
                    toggleFluteSection();
                    return;
                }
                render(y);
            });

            window.getSelectedIndustrialWidth = () => (hid && hid.value ? parseFloat(hid.value) : null);
        })();
    </script>

    <!-- گام فلوت + ترکیب کاغذ (API-Driven) -->
    <script>
/*
  نسخه ساده‌شده: فقط انتخاب «کاغذ» برای هر لایه
  و در انتهای جدول دو ستون «جمع گرماژ» و «جمع مبلغ».

  اگر API در مسیر دیگری است، این را عوض کن:
  const API_PAPERS = '@Url.Content("~/api/paper")';
*/
(function(){
  const API_PAPERS = '@Url.Content("~/api/paper")';

  // ===== کش API =====
  let PAPERS = null, LOADING = null;

  // کمکی‌ها
  const esc = s => (s??'').toString().replace(/[&<>"']/g,m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
  const toFa = n => (isFinite(n) ? Number(n).toLocaleString('fa-IR') : '۰');

  function csvToNums(s){
    if(!s) return [];
    if(Array.isArray(s)) return s.map(Number).filter(v=>!isNaN(v));
    return s.toString().split(/[,\s;|]+/).map(Number).filter(v=>!isNaN(v));
  }
  function parseWidth(name){
    const m = /عرض\s*([0-9]+)/i.exec(name);
    return m ? +m[1] : null;
  }
  function parseGram(name){
    const m = /گرماژ\s*([0-9]+)/i.exec(name) || /([0-9]+)\s*گرم/i.exec(name);
    return m ? +m[1] : null;
  }

  async function loadPapers(){
    if (PAPERS) return PAPERS;
    if (LOADING) return await LOADING;

    LOADING = (async () => {
      const res = await fetch(API_PAPERS, { headers:{ 'Accept':'application/json' }});
      if(!res.ok) throw new Error('Paper API ' + res.status);
      let data = await res.json();
      if (data && typeof data === 'object' && !Array.isArray(data) && ('data' in data)) data = data.data;

      const norm = (p) => {
        const id = Number(p.id ?? p.ID ?? p.paper_id ?? p.PaperId);
        const name = (p.name ?? p.Paper_Name ?? p.title ?? '').toString();
        const price = Number(p.price ?? p.price_per_sheet ?? p.Price ?? 0);

        const widths = csvToNums(p.widths ?? p.cat1 ?? p.widths_cat1 ?? p.widthsCsv);
        const grammages = csvToNums(p.grammages ?? p.cat2 ?? p.grammagesCsv);

        const wN = parseWidth(name), gN = parseGram(name);
        if (wN != null && !widths.length) widths.push(wN);
        if (gN != null && !grammages.length) grammages.push(gN);

        return { id, name, price, widths, grammages };
      };

      PAPERS = Array.isArray(data) ? data.map(norm).filter(x => !isNaN(x.id)) : [];
      return PAPERS;
    })();

    try { return await LOADING; }
    finally { LOADING = null; }
  }

  // ===== وضعیت انتخاب عرض صنعتی =====
  function hasIndustrialWidth(){
    return typeof window.getSelectedIndustrialWidth==='function' && !!window.getSelectedIndustrialWidth();
  }
  async function filterByIndustrialWidth(){
    const all = await loadPapers();
    const selW = (typeof window.getSelectedIndustrialWidth==='function') ? window.getSelectedIndustrialWidth() : null;
    if(!selW) return all;
    const filtered = all.filter(p => (p.widths||[]).some(v => v >= selW));
    return filtered.length ? filtered : all;
  }

  // ===== عناصر DOM =====
  const fluteSection   = document.getElementById('fluteSection');
  const fluteSelect    = document.getElementById('fluteSelect');
  const headEl         = document.getElementById('paperComboHead');
  const bodyEl         = document.getElementById('paperComboBody');
  const hidFluteType   = document.getElementById('SelectedFluteType');
  const selType        = document.getElementById('productType');
  const isRegular      = () => (selType?.value || '').toLowerCase() === 'regular';

  function setFluteVisibility(){
    fluteSection?.classList.toggle('d-none', !hasIndustrialWidth() || !isRegular());
  }

  // ===== تعریف ستون‌های فلوت =====
  const FLUTE_COLS={
    'C':['رویه','لایه میانی','فلوت C','زیره'],
    'B':['رویه','لایه میانی','فلوت B','زیره'],
    'E':['رویه','لایه میانی','فلوت E','زیره'],
    'CB':['رویه','فلوت B/E','لایه میانی','فلوت C','زیره'],
    'CE':['رویه','فلوت B/E','لایه میانی','فلوت C','زیره'],
    'BE':['رویه','فلوت B/E','لایه میانی','فلوت C','زیره']
  };
  function colKeys(t){
    switch(t){
      case 'C': return ['top','mid','flute_c','bottom'];
      case 'B': return ['top','mid','flute_b','bottom'];
      case 'E': return ['top','mid','flute_e','bottom'];
      case 'CB': case 'CE': case 'BE': return ['top','flute_be','mid','flute_c','bottom'];
      default: return [];
    }
  }

  // ===== رندر جدول با ستون مجموع‌ها =====
  async function renderPaperTable(t){
    headEl.innerHTML=''; bodyEl.innerHTML='';
    if(!t || !FLUTE_COLS[t] || !isRegular()) return;

    const cols=FLUTE_COLS[t], keys=colKeys(t);

    // Header
    let h1 = `<tr><th class="text-center" rowspan="1" style="min-width:160px">ردیف</th>`;
    cols.forEach(c => { h1 += `<th class="text-center">${c} (کاغذ)</th>`; });
    h1 += `<th class="text-center">جمع گرماژ</th><th class="text-center">جمع مبلغ</th></tr>`;
    headEl.innerHTML = h1;

    const list = await filterByIndustrialWidth();
    const paperOpts = list.map(p =>
      `<option value="${p.id}" data-price="${+p.price||0}" data-grams="${(p.grammages||[]).join(',')}">${esc(p.name)}</option>`
    ).join('');

    function buildCells(namePrefix){
      return keys.map(k => `
        <td>
          <select class="form-select form-select-sm paper-select" name="${namePrefix}.${k}">
            <option value="">-- انتخاب کاغذ --</option>${paperOpts}
          </select>
        </td>
      `).join('');
    }

    // سطرها: main و alternative
    bodyEl.innerHTML = `
      <tr data-row="main">
        <th class="text-center">ترکیب اصلی</th>
        ${buildCells('PaperCombo.Main')}
        <td class="text-center">
          <span class="sum-gram" data-row="main">۰</span>
          <input type="hidden" name="PaperCombo.Main.TotalGrammage" value="0" />
        </td>
        <td class="text-center">
          <span class="sum-price" data-row="main">۰</span>
          <input type="hidden" name="PaperCombo.Main.TotalPrice" value="0" />
        </td>
      </tr>
      <tr data-row="alt">
        <th class="text-center">درصورت استفاده از کاغذهای جایگزین مشخص فرمایید</th>
        ${buildCells('PaperCombo.Alternative')}
        <td class="text-center">
          <span class="sum-gram" data-row="alt">۰</span>
          <input type="hidden" name="PaperCombo.Alternative.TotalGrammage" value="0" />
        </td>
        <td class="text-center">
          <span class="sum-price" data-row="alt">۰</span>
          <input type="hidden" name="PaperCombo.Alternative.TotalPrice" value="0" />
        </td>
      </tr>
    `;

    wireEventsAndTotals();
  }

  // ===== محاسبه مجموع‌ها برای هر ردیف =====
  async function wireEventsAndTotals(){
    const all = await loadPapers();
    function findPaperById(id){ return all.find(x => x.id === id); }

    function calcRowTotals(tr){
      let gSum = 0, pSum = 0;

      tr.querySelectorAll('select.paper-select').forEach(sel => {
        const pid = parseInt(sel.value, 10);
        if (!pid) return;
        const p = findPaperById(pid);
        if (!p) return;

        // گرماژ
        let g = 0;
        if (p.grammages && p.grammages.length) g = Number(p.grammages[0]) || 0;
        else {
          const dg = (sel.selectedOptions[0]?.dataset?.grams || '').split(',').map(Number).filter(v=>!isNaN(v));
          if (dg.length) g = dg[0];
        }
        gSum += g;

        // مبلغ
        pSum += Number(p.price || 0);
      });

      tr.querySelector('.sum-gram').textContent  = toFa(gSum);
      tr.querySelector('.sum-price').textContent = toFa(pSum);
      const hidG = tr.querySelector('input[name$=".TotalGrammage"]');
      const hidP = tr.querySelector('input[name$=".TotalPrice"]');
      if (hidG) hidG.value = gSum;
      if (hidP) hidP.value = pSum;
    }

    function recalcAll(){
      document.querySelectorAll('#paperComboBody tr[data-row]').forEach(calcRowTotals);
    }

    // ایونت تغییر انتخاب‌ها
    document.querySelectorAll('#paperComboBody select.paper-select').forEach(sel => {
      sel.addEventListener('change', () => calcRowTotals(sel.closest('tr')));
    });

    // محاسبه اولیه
    recalcAll();
  }

  // ===== اتصال با بقیه صفحه =====
  setFluteVisibility();
  window.reRenderFluteIfNeeded = async function(){
    if (fluteSelect?.value) await renderPaperTable(fluteSelect.value);
  };
  fluteSelect?.addEventListener('change', async function(){
    if(!isRegular()) return;
    hidFluteType.value = this.value || '';
    await renderPaperTable(this.value);
  });

  document.addEventListener('productType:modeChanged', () => {
    setFluteVisibility();
    if (!isRegular()) {
      headEl.innerHTML=''; bodyEl.innerHTML='';
      hidFluteType.value = '';
    }
  });
})();
    </script>
    <script>
        (function () {
            const $ = s => document.querySelector(s);
            const val = s => { const el = $(s); if (!el) return null; if (el.type === 'number') { const v = parseFloat((el.value || '').toString().replace(',', '.')); return isNaN(v) ? null : v; } return (el.value || '').trim(); };
            const rVal = n => { const el = document.querySelector(`input[name="${n}"]:checked`); return el ? el.value : null; };

            async function sendInquiry() {
                const ddl = document.getElementById('J_ID_Customer') || document.querySelector('[name="J_ID_Customer"]');
                const payload = {
                    J_ID_Customer: ddl ? parseInt(ddl.value || '0', 10) || null : null,
                    CustomerName: ddl?.selectedOptions?.[0]?.textContent?.trim() || null,
                    Number_Order: val('[name="Number_order"]') || val('#Number_order') || '',
                    Date: val('[name="Date"]') || val('#Date') || '',

                    Product_Code: val('[name="Product.Code"]'),
                    Product_Type: val('#productType'),
                    Product_Name: val('[name="Product.Name"]'),
                    Product_Tirage: (function () { const v = val('#tirage'); return v == null ? null : parseInt(v, 10); })(),
                    Product_Desc: val('[name="Product.Description"]'),
                    Layers_Count: rVal('Product.Layers'),
                    Pieces_Count: rVal('Product.Pieces'),
                    Door_Type: val('#doorOption'),
                    LengthCm: val('#lengthCm'),
                    WidthCm: val('#widthCm'),
                    HeightCm: val('#heightCm')
                };

                if (!payload.Product_Type || payload.Product_Type.toLowerCase() === 'regular') {
                    alert('برای استعلام باید نوع کارتن غیر از «معمولی» باشد.'); return;
                }
                if (!payload.J_ID_Customer && !payload.CustomerName) {
                    alert('لطفاً مشتری را انتخاب کنید.'); return;
                }

                const res = await fetch('/api/inquiry', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const data = await res.json().catch(() => ({}));
//if (!res.ok || !data.ok) { alert(data.message || 'خطا در ثبت استعلام'); return; }

                if (!res.ok) {
                    console.error('Inquiry error:', data);
                    const errs = (data && data.errors) ? '\n- ' + data.errors.join('\n- ') : '';
                    alert((data.message || 'خطای اعتبارسنجی') + errs);
                    return;
                }
                alert('ثبت شد. شماره سفارش: ' + (data.orderId || '?'));
               // alert('استعلام ثبت شد. شماره سفارش: ' + data.orderId);
                // window.location.href = '/Orders/Details/' + data.orderId; // اگر خواستی
            }

            document.getElementById('btnInquiry')?.addEventListener('click', () => sendInquiry().catch(() => alert('اشکال در ارتباط با سرور')));
        })();
    </script>

}
```
